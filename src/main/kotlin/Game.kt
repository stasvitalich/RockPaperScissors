// Игра камень, ножницы, бумага.

fun main(args: Array<String>) { // Создаём общую функцию.
    val options = arrayOf("Rock", "Paper", "Scissors") // Создаём массив, который будет хранить варианты выбора.
    val gameChoice = getGameChoice(options) // Данная переменная позволит нам вызвать функцию, которая отвечает за выбор компьютера.
    val userChoice = getUserChoice(options) // Данная переменная позволит нам вызвать функцию, которая отвечает за выбор пользователя.
    val finalResult = printResult(userChoice, gameChoice) // Данная функция выводит результат игры, вызывая функцию, где поочерёдно проверяются варианты выбора.
    println(finalResult) // Выводим на экран финальный результат.
}

fun getGameChoice(optionsParam: Array<String>) = // Создаём функцию, которая рандомно будет один из вариантов
    optionsParam[(Math.random() * optionsParam.size).toInt()] // для компьютера.

fun getUserChoice(optionsParam: Array<String>): String { // Создаём функцию, которая позволит нам получить выбор пользователя.
    var isValidChoice = false // Создаём переменную ВалидныйВыбор и задаём ей значение false. Это понадобится нам, чтобы исключить ввод пользователем неверных значений.
    var userChoice = "" // Переменная должная быть инициализирована.

    while (!isValidChoice) { // До тех пор, пока ВалидныйВыбор не станет равен true, цикл будет продолжаться.
                             // Такой подход не оставит перед пользователем вариантов кроме как ввести нужное имя.
        print("Please enter one of the following:") // Просим пользователя сделать выбор.
        for (item in optionsParam) print(" $item") // Цикл for здесь помогает нам поочередно распечатать каждый из вариантов массива.
        println(".") // В конце предложения ставим точку. Такой подход поможет нам безболезненно менять переменные, если мы этого захотим.
        val userInput = readLine() // Создаём переменную, в которой будем хранить результат ввода данных с клавиатуры.

        if (userInput != null && userInput in optionsParam) { // Если пользовательский ввод не равен нулю и он присутствует в списке вариантов,
            isValidChoice = true // значит, ВалидныйВыбор принимает значение true.
            userChoice = userInput // В таком случае присваиваем переменной пользовательскийВыбор значение переменной пользовательскийВвод.
        }

        if (!isValidChoice) println("You must enter a valid choice.") // Если пользовательский выбор так и остался со своим изначальным значением,
    }                                                                 // загоняем пользователя на новый круг, сообщая ему, что выбор должен таки стать валидным.
    return userChoice // В результате работы функции, возвращаем пользовательскийВыбор.
}

fun printResult(userChoice: String, gameChoice: String) { // Новая функция, которая принимает на вход 2 параметра: выборПользователя и выборКомпьютера.
    val result: String // Результат будет строкой: Ничья, Ты победил или Ты проиграл.

    if (userChoice == gameChoice) result = "Tie!" // Если выбор пользователя и компьютера совпали - ничья.
    else if ((userChoice == "Rock" && gameChoice == "Scissors") || // В блоке else if описываем все возможные сценарии,
        (userChoice == "Paper" && gameChoice == "Rock") || // при которых пользователь выигрывает.
        (userChoice == "Scissors" && gameChoice == "Paper")
    ) result = "You win!" // Если это так, то переменная результат будет иметь значение Ты выиграл.
    else result = "You lose!" // Во всех остальных случаях, в результате будет храниться значение Ты проиграл.
    //Вывести результат
    println("You chose $userChoice. I chose $gameChoice. $result") // В результате выводим строку.
    // Здесь будет показан выбор пользователя, выбор компьютера и результат игры.
}